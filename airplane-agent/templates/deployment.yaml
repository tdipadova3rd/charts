{{- $_ := required "airplane.teamID is a required value" .Values.airplane.teamID }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kubernetes_agent.fullname" . }}
  labels:
    {{- include "kubernetes_agent.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kubernetes_agent.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  template:
    metadata:
      labels:
        {{- include "kubernetes_agent.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "kubernetes_agent.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{ $image := printf "%s:%s" .Values.image.repository .Chart.AppVersion -}}
          image: "{{ $image }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: AP_API_TOKEN
              {{- if .Values.airplane.apiToken }}
              value: "{{ .Values.airplane.apiToken }}"
              {{- else if .Values.airplane.apiTokenSecret.name }}
              valueFrom:
                secretKeyRef:
                  {{- toYaml .Values.airplane.apiTokenSecret | nindent 18 }}
              {{- else }}
              value: ""
              {{- end }}
            - name: AP_TEAM_ID
              value: "{{ .Values.airplane.teamID }}"
            - name: AP_API_HOST
              value: "{{ .Values.airplane.apiHost }}"
            - name: AP_DRIVER
              value: "kubernetes"
            - name: AP_K8S_NAMESPACE
              value: "{{ .Values.airplane.runNamespace }}"
            - name: AP_K8S_RUNTIME_CLASS
              value: "{{ .Values.airplane.runtimeClass }}"
            - name: AP_K8S_TOLERATIONS
              value: "{{- range $key, $val := .Values.airplane.tolerations }}{{ $key }}={{ $val }};{{- end }}"
            - name: AP_K8S_NODE_SELECTOR
              value: "{{- range $key, $val := .Values.airplane.nodeSelector }}{{ $key }}={{ $val }};{{- end }}"
            - name: AP_LABELS
              value: "airplane_installer:helm
                {{- range $key, $val := .Values.airplane.agentLabels }} {{ $key }}:{{ $val }}
                {{- end }}"
            - name: AP_INSTALLED_BY
              value: "github.com/airplanedev/charts/airplane-agent?ref={{ .Chart.Version }}"
            - name: AP_MTA_AGENT
              value: "{{ .Values.airplane.mtaAgent | toString }}"
            - name: AP_PORT
              value: "8080"
            - name: AP_SERVICE_JWT_SECRET
              {{- if .Values.airplane.serviceJWTSecret.name }}
              valueFrom:
                secretKeyRef:
                  {{- toYaml .Values.airplane.serviceJWTSecret | nindent 18 }}
              {{- else }}
              value: ""
              {{- end }}
            - name: AP_AUTO_UPGRADE
              value: "{{ .Values.airplane.autoUpgrade }}"
            - name: AP_AGENT_IMAGE
              value: "{{ $image }}"
            - name: SENTRY_DSN
              value: "{{ .Values.sentry.dsn }}"
            - name: SENTRY_ENVIRONMENT
              value: "{{ .Values.sentry.environment }}"
            - name: AP_ENVIRONMENT
              value: "{{ .Values.sentry.environment }}"
            - name: AP_LOCK_KEY
              {{- if .Values.airplane.randomLockID }}
              value: "helm-{{ .Values.airplane.randomLockID }}"
              {{- else }}
              value: "helm-{{ sha1sum (printf "%s-%s-%s-%s-%s-%s" .Values.airplane.teamID .Release.Namespace .Values.airplane.runNamespace .Release.Name .Values.airplane.envSlug (toJson .Values.airplane.agentLabels)) }}"
              {{- end }}
            - name: AP_ENV_SLUG
              value: "{{ .Values.airplane.envSlug }}"
            - name: AP_K8S_DNS_POLICY
              value: "{{ .Values.airplane.dnsPolicy }}"
            - name: AP_RUNNER_TEMPORAL_HOST
              value: "{{ .Values.airplane.temporalHost }}"
            - name: AP_K8S_SERVICE_ACCOUNT_NAME
              value: "{{ .Values.airplane.taskServiceAccountName }}"
            - name: AP_LOCALDEV
              value: "{{ .Values.airplane.debugMode }}"
            - name: AP_DEBUG_LOGGING
              value: "{{ .Values.airplane.debugMode }}"
            - name: AP_USE_ECR_PUBLIC_IMAGES
              value: "{{ .Values.airplane.useECRPublicImages }}"
            - name: AP_K8S_POD_SECURITY_CONTEXT
              value: '{{ toJson .Values.airplane.taskPodSecurityContext }}'
            - name: AP_K8S_CONTAINER_SECURITY_CONTEXT
              value: '{{ toJson .Values.airplane.taskSecurityContext }}'
            - name: AP_ALLOW_REMOTE_OBSERVABILITY
              value: "{{ .Values.airplane.allowRemoteObservability }}"
            - name: AP_OTEL_COLLECTOR_URL
              value: "{{ .Values.airplane.otelCollectorURL }}"
            - name: AP_OTEL_COLLECTOR_RUNBROKER_URL
              value: "{{ .Values.airplane.otelCollectorURL }}"
            - name: AP_LOG_TASK_OUTPUT
              value: "{{ .Values.airplane.logTaskOutput }}"
            - name: AP_DEFAULT_CPU
              value: "{{ .Values.airplane.defaultTaskResources.requests.cpu }}"
            - name: AP_DEFAULT_MEMORY
              value: "{{ .Values.airplane.defaultTaskResources.requests.memory }}"
            - name: AP_K8S_MIN_CPU_LIMIT
              value: "{{ .Values.airplane.defaultTaskResources.limits.cpu }}"
            - name: AP_K8S_MIN_MEMORY_LIMIT
              value: "{{ .Values.airplane.defaultTaskResources.limits.memory  }}"
            {{- if .Values.airplane.storage.enabled }}
            - name: AP_AGENT_STORAGE_ENABLED
              value: "true"
            - name: AP_AGENT_STORAGE_TEAM_ID
              value: "{{ .Values.airplane.teamID }}"
            - name: AP_AGENT_STORAGE_ZONE_SLUG
              value: "{{ .Values.airplane.storage.zoneSlug }}"
            - name: AP_AGENT_STORAGE_ZONE_NAME
              value: "{{ .Values.airplane.storage.zoneName }}"
            - name: AP_AGENT_STORAGE_INTERNAL_HOST
              value: "http://airplane-agent-internal.{{ .Release.Namespace }}:2189"
            - name: AP_AGENT_STORAGE_EXTERNAL_URL
              {{- if .Values.airplane.storage.externalServerURL }}
              value: "{{ .Values.airplane.storage.externalServerURL }}"
              {{- else }}
              value: "https://{{ .Values.airplane.storage.zoneSlug }}.{{ .Values.airplane.teamID }}.{{ .Values.airplane.storage.domain }}"
              {{- end }}
            - name: AP_AGENT_STORAGE_JWT_PUBLIC_KEY
              value: "{{ .Values.airplane.storage.jwtPublicKey }}"
            - name: AP_AGENT_STORAGE_S3_AGENT_STORAGE_BUCKET
              value: "{{ .Values.airplane.storage.s3BucketName }}"
            - name: AP_AGENT_STORAGE_GCS_AGENT_STORAGE_BUCKET
              value: "{{ .Values.airplane.storage.gcsBucketName }}"
            - name: AP_AGENT_STORAGE_ABS_ACCOUNT
              value: "{{ .Values.airplane.storage.absAccountName }}"
            - name: AP_AGENT_STORAGE_ABS_CONTAINER
              value: "{{ .Values.airplane.storage.absContainerName }}"
            - name: AP_AGENT_STORAGE_REDIS_HOST
              value: "{{ .Values.airplane.storage.redisHost }}"
            {{- end }}
            {{- if .Values.airplane.storage.gcpAppCredentialsSecret.name }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/gcp_credentials/{{ .Values.airplane.storage.gcpAppCredentialsSecret.key }}"
            {{- end }}
            {{- if .Values.airplane.extraEnvVars }}
            - name: AP_EXTRA_ENV_VARS
              value: '{{ toJson .Values.airplane.extraEnvVars }}'
            {{- range $key, $val := .Values.airplane.extraEnvVars }}
            - name: "{{ $key }}"
              value: '{{ $val }}'
            {{- end }}
            {{- end }}
            {{- if .Values.airplane.runnerPodSpecPatch }}
            - name: AP_K8S_RUNNER_POD_SPEC_PATCH
              value: '{{ toJson .Values.airplane.runnerPodSpecPatch }}'
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            {{- if .Values.airplane.storage.enabled }}
            - name: internal
              containerPort: 2189
              protocol: TCP
            - name: external
              containerPort: 2190
              protocol: TCP
            {{- end }}
          {{- if .Values.enableHealthProbes }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.airplane.storage.gcpAppCredentialsSecret.name }}
          volumeMounts:
            - name: gcp-credentials
              mountPath: "/etc/gcp_credentials"
              readOnly: true
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.airplane.storage.gcpAppCredentialsSecret.name }}
      volumes:
        - name: gcp-credentials
          secret:
            secretName: "{{ .Values.airplane.storage.gcpAppCredentialsSecret.name }}"
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
