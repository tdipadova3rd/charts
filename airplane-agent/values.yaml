replicaCount: 3

airplane:
  # Specify either apiToken or apiTokenSecret, not both
  apiToken: ""
  apiTokenSecret:
    name: ""
    key: ""

  # Specify either teamID or teamIDSecret, not both
  teamID: ""
  teamIDSecret:
    name: ""
    key: ""

  agentLabels: {}
  runNamespace: default
  envSlug: ""

  apiHost: https://api.airplane.dev
  temporalHost: temporal-api.airplane.dev:443
  mtaAgent: false
  runtimeClass: ""

  # Node selectors to use when scheduling runs.
  # Accepts a map of key-value pairs where keys are node labels and values
  # are the expected value for that label. For example:
  # - my_node_label: my_expected_label_value
  nodeSelector: {}

  # Tolerations to use when scheduling runs. Each toleration will have an operator
  # of "Equal" and an effect of "NoSchedule".
  # Accepts a map of key-value pairs. For example:
  # - my_toleration_key: my_toleration_value
  tolerations: {}

  # Deprecated. Use "dnsPolicy: ClusterFirst" instead.
  clusterFirstDNS: false

  # The DNS policy to apply to runs.
  #
  # Accepts any of "Default", "ClusterFirst", "ClusterFirstWithHostNet", and "None".
  # See: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy.
  #
  # NOTE: If your tasks need to communicate with other services in your cluster, then you probably
  # want "ClusterFirst" here. We're setting "Default" for backwards compatibility reasons, but this
  # will be changed in the next major version of this chart.
  dnsPolicy: Default

  serviceJWTSecret:
    name: ""
    key: ""
  autoUpgrade: true

  # A random identifier, such as a UUIDv4, that uniquely identifies this agent within your team.
  # By default, this is regenerated every time the chart runs but can be overridden to keep it consistent.
  randomLockID: ""

  # The name of the service account to run task pods under. If unset, they'll use the
  # default service account in the runNamespace.
  taskServiceAccountName: ""

  # Pod and container security contexts for task pods spun up by the agent.
  taskPodSecurityContext: {}
  taskSecurityContext: {}

  # Set to true if you're running inside AWS and want to use ECR-sourced public
  # images. This can improve performance and may reduce networking costs.
  useECRPublicImages: false

  # For development purposes only.
  debugMode: false

  # Extra environment variables to apply to all agent and task containers. Useful
  # for setting things like HTTP_PROXY.
  extraEnvVars: {}

  # Configuration for remote observability. This allows Airplane to better debug errors
  # and performance regressions in self-hosted agents.
  allowRemoteObservability: true
  otelCollectorURL: https://otel-collector.airplane.dev

  # Whether to log task output to stdout/stderr so it can be picked up
  # by your own logging systems.
  logTaskOutput: false

  # Default CPU and memory requests and limits for task runners spun up by
  # the agent.
  defaultTaskResources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 2Gi

  # Settings for self-hosted storage (https://docs.airplane.dev/self-hosting/storage).
  #
  # NOTE: Self-hosted storage support for Kubernetes is still experimental. Please
  # talk to support@airplane.dev before enabling.
  storage:
    enabled: false
    mode: gke

    # GCP settings
    gcpIPAddressName: ""
    gcsBucketName: ""

    # AWS settings
    s3BucketName: ""

    # Common settings
    redisHost: ""
    zoneName: "Storage GKE test"
    zoneSlug: "gketest"
    domain: "d.airplane.sh"
    jwtPublicKey: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF1MGNBdTVmNnFrbWw0MUZxT01hcAo5cmNiZnNwOEJ3MFZVMlRra2pxTDFEOWYrYmF6TEdvcDJSYThWTTcxKzlPamFiNXpnWWZYOTdtWiszUmVUMTNQCkJ5clhRR1BuQ1VoVG9JOEVBdjA2NjJMbG83SzFHYm9TUjF6TjJoMWlNaXAwRFJQSUp0REJNL3QyTUxsSUxxRUMKbTlDdmNkTTg0dXdQc201VDdQV014Z0dYUG9pRnhwR1h5T2w1eCtjOGRaL1lHWU13V3A1eWNnRTVCb1lOK05SaAp0dE94T2NGS0JMbGgvaFNNeWUwaEV5cjlsMVYzVFovQW5xaUxWRlZsYUZ2MmJxbzNacnZUSG5rZHZQaVdkSDMxCmhvWWJJZDRmcHAreWFsNURtZmJqSklPQWFUN2R2UVRqZE9LUzQreW9TdGp2VlY2ZGdxVWtiK1dlcEg3Sk9UWUcKVVNhakRLSkMrQll3K2U5bE5XTldXRU4rc3NvaHBEb3BzaW12MTBKQUI1SFRUU1JBVXFhbzRSRndpVjhiRmFPUQpISFBqUWNBOWlSamluNDN3VDhsVnNNK1hTOFRLZVB6WGF2K3dtWXl1T3dNWTZ6Z0ppU1hZSG5EaDgwTWt0WmlkCkNBQk9BK0I3RWI0dHE1cXlPNzNnNndxTGZIeDVrblYyNjU1N2JZVjdkSUVsSUJiNnVsdnM5L1doV2VnNFhlRVcKdHh3M2gwNC9PWHZ6VlV2c0dVRXdTVmhjbzFyNU1sOWxTMHVrN0U2cG5aRTljSkI2T1VuMHVqSW9KQW91UDhwQwpaTDBNWkRlVys2ZThKV0Fqc043bjFjbUdhRC9jdER2N2E2eHNvbWsyTjVXQzE0U1lLUGVSTndTb05pOE5icENOCjJLZU5zTGlybXlqZEY5c29jVTFqVlQwQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="

image:
  repository: us-docker.pkg.dev/airplane-prod/public/agentv2
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

rbac:
  create: true

serviceAccount:
  create: true
  annotations: {}

resources:
  requests:
    cpu: 250m
    memory: 256Mi
  limits:
    memory: 256Mi

podSecurityContext: {}

securityContext: {}

# Node selectors to use when scheduling agents.
# Accepts a map of key-value pairs where keys are node labels and values
# are the expected value for that label. For example:
# - my_node_label: my_expected_label_value
nodeSelector: {}

# Tolerations to use when scheduling agents.
# Accepts a list of tolerations. For example:
# - key: "my_toleration_key"
#   operator: "Equal"
#   value: "my_toleration_value"
#   effect: "NoSchedule"
tolerations: []

affinity: {}

extraLabels: {}

enableHealthProbes: true

sentry:
  dsn: ""
  environment: ""
