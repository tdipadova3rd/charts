airplane:
  # Set your Airplane API token either directly in `apiToken` or in the secret referenced by
  # `apiTokenSecret`, but not both (required).
  apiToken: ""
  apiTokenSecret:
    name: ""
    key: ""

  # Set your team ID (required).
  teamID: ""

  # The namespace that your tasks will run in. This is usually set to the same namespace
  # that the chart is deployed in.
  runNamespace: default

  # Whether to automatically upgrade the agent each time a new version is released.
  # It's recommended to keep this set to true. If false, you'll need to manually
  # cycle the agent pods on a regular basis to get updates and bug fixes.
  autoUpgrade: true

  # Whether to log task output to stdout/stderr so it can be picked up
  # by your own logging systems.
  logTaskOutput: false

  # Whether to enable debug logging.
  debugMode: false

  # Whether to enable sending error logs to Airplane. This allows Airplane to better
  # debug errors and performance regressions in self-hosted agents, and it's recommended
  # to keep it on.
  allowRemoteObservability: true

  # The environment to restrict this agent to. Leave blank to allow the agent
  # to run tasks from all environments.
  envSlug: ""

  # Labels that will be used to identify the agent and restrict which tasks
  # can run on it.
  agentLabels: {}

  # Runtime class for task runner pods spun up by the agent.
  runtimeClass: ""

  # Node selectors to use when scheduling task runner pods.
  #
  # Accepts a map of key-value pairs where keys are node labels and values
  # are the expected value for that label. For example:
  # - my_node_label: my_expected_label_value.
  nodeSelector: {}

  # Tolerations to use when scheduling task runner pods. Each toleration will have an
  # operator of "Equal" and an effect of "NoSchedule".
  #
  # Accepts a map of key-value pairs. For example:
  # - my_toleration_key: my_toleration_value
  tolerations: {}

  # The DNS policy to apply to task runners.
  #
  # See: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy.
  dnsPolicy: ClusterFirst

  # A random identifier, such as a UUIDv4, that uniquely identifies this agent within your team.
  #
  # By default, this is generated from a hash of your team ID, chart name, namespace, envSlug,
  # and agentLabels, but it can be overridden if you have multiple agent sets with the same
  # chart values.
  randomLockID: ""

  # The name of the service account to run task pods under. If unset, they'll use the
  # default service account in the `runNamespace` specified above.
  taskServiceAccountName: ""

  # Pod and container security contexts for task runners spun up by the agent.
  taskPodSecurityContext: {}
  taskSecurityContext: {}

  # Set to true if you're running inside AWS and want to use ECR-sourced public
  # images. This can improve performance and may reduce networking costs.
  useECRPublicImages: false

  # Extra environment variables to apply to all agent and task containers. Useful
  # for setting things like HTTP_PROXY.
  extraEnvVars: {}

  # Default CPU and memory requests and limits for task runners spun up by
  # the agent.
  defaultTaskResources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 2Gi

  # Patch to apply to all runner pod specs.
  #
  # Example (adding a custom sidecar container):
  #
  #   runnerPodSpecPatch:
  #     containers:
  #       - name: sidecar
  #         image: "ubuntu:latest"
  #         command:
  #           - /bin/bash
  #           - "-c"
  #           - trap "echo exiting; exit 1" SIGHUP SIGINT SIGTERM; while true; do sleep 20; done
  #
  runnerPodSpecPatch: {}

  # Settings for self-hosted storage (https://docs.airplane.dev/self-hosting/storage).
  #
  # NOTE: Self-hosted storage support for Kubernetes is still experimental. Please
  # talk to support@airplane.dev before enabling.
  storage:
    enabled: false

    # Set to either gke, eks, or base
    mode: gke

    # GCP settings
    gcpIPAddressName: ""
    gcsBucketName: ""

    # Secret for static GCP credentials that will be used to set the
    # GOOGLE_APPLICATION_CREDENTIALS environment variable. This is only needed if
    # you're running in a cluster without workload identity
    # (https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity).
    gcpAppCredentialsSecret:
      name: ""
      key: ""

    # AWS settings
    s3BucketName: ""
    awsTargetGroupARN: ""

    # Azure settings
    absAccountName: ""
    absContainerName: ""

    # Common settings
    redisHost: ""
    zoneName: "Kube storage zone"
    zoneSlug: "kube"

    # Advanced settings- these should be left as-is in most cases
    externalServerURL: ""
    domain: "d.airplane.sh"
    jwtPublicKey: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF1MGNBdTVmNnFrbWw0MUZxT01hcAo5cmNiZnNwOEJ3MFZVMlRra2pxTDFEOWYrYmF6TEdvcDJSYThWTTcxKzlPamFiNXpnWWZYOTdtWiszUmVUMTNQCkJ5clhRR1BuQ1VoVG9JOEVBdjA2NjJMbG83SzFHYm9TUjF6TjJoMWlNaXAwRFJQSUp0REJNL3QyTUxsSUxxRUMKbTlDdmNkTTg0dXdQc201VDdQV014Z0dYUG9pRnhwR1h5T2w1eCtjOGRaL1lHWU13V3A1eWNnRTVCb1lOK05SaAp0dE94T2NGS0JMbGgvaFNNeWUwaEV5cjlsMVYzVFovQW5xaUxWRlZsYUZ2MmJxbzNacnZUSG5rZHZQaVdkSDMxCmhvWWJJZDRmcHAreWFsNURtZmJqSklPQWFUN2R2UVRqZE9LUzQreW9TdGp2VlY2ZGdxVWtiK1dlcEg3Sk9UWUcKVVNhakRLSkMrQll3K2U5bE5XTldXRU4rc3NvaHBEb3BzaW12MTBKQUI1SFRUU1JBVXFhbzRSRndpVjhiRmFPUQpISFBqUWNBOWlSamluNDN3VDhsVnNNK1hTOFRLZVB6WGF2K3dtWXl1T3dNWTZ6Z0ppU1hZSG5EaDgwTWt0WmlkCkNBQk9BK0I3RWI0dHE1cXlPNzNnNndxTGZIeDVrblYyNjU1N2JZVjdkSUVsSUJiNnVsdnM5L1doV2VnNFhlRVcKdHh3M2gwNC9PWHZ6VlV2c0dVRXdTVmhjbzFyNU1sOWxTMHVrN0U2cG5aRTljSkI2T1VuMHVqSW9KQW91UDhwQwpaTDBNWkRlVys2ZThKV0Fqc043bjFjbUdhRC9jdER2N2E2eHNvbWsyTjVXQzE0U1lLUGVSTndTb05pOE5icENOCjJLZU5zTGlybXlqZEY5c29jVTFqVlQwQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="

  # These are for development purposes only. Please don't change them without reaching out
  # to support@airplane.dev first.
  apiHost: https://api.airplane.dev
  temporalHost: temporal-api.airplane.dev:443
  otelCollectorURL: https://otel-collector.airplane.dev
  mtaAgent: false
  serviceJWTSecret:
    name: ""
    key: ""

# Number of agent replicas to run.
replicaCount: 3

# Image to use for the agent.
image:
  repository: us-docker.pkg.dev/airplane-prod/public/agentv2
  pullPolicy: Always
imagePullSecrets: []

# Settings to override the chart name.
nameOverride: ""
fullnameOverride: ""

# Whether to create RBAC rules that allow the agent to create pods and secrets
# in the runner namespace. This should be kept as-is in most cases.
rbac:
  create: true

# Whether to create a service account for the agent. This should be kept as-is in
# most cases.
serviceAccount:
  create: true
  annotations: {}

# Resource requests and limits for the agent pods.
resources:
  requests:
    cpu: 250m
    memory: 256Mi
  limits:
    memory: 256Mi

# Pod and container security contexts for the agent.
podSecurityContext: {}
securityContext: {}

# Node selectors to use when scheduling agents.
#
# Accepts a map of key-value pairs where keys are node labels and values
# are the expected value for that label. For example:
# - my_node_label: my_expected_label_value
nodeSelector: {}

# Tolerations to use when scheduling agents.
#
# Accepts a list of tolerations. For example:
# - key: "my_toleration_key"
#   operator: "Equal"
#   value: "my_toleration_value"
#   effect: "NoSchedule"
tolerations: []

# Affinity settings for the agent pods.
affinity: {}

# Extra labels to apply to the agent pods.
extraLabels: {}

# Whether to enable liveness and readiness checks for the agent pods.
enableHealthProbes: true

# Optional settings for sending agent errors to Sentry.
sentry:
  dsn: ""
  environment: ""
